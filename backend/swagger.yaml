openapi: 3.0.0
info:
  title: Scanalyze API
  description: Official Scanalyze API for PDG  module
  version: 0.1.9
servers:
  - url: http://api.example.com/v1
    description: Optional server description, e.g. Main (production) server
  - url: http://staging-api.example.com
    description: Optional server description, e.g. Internal staging server for testing
tags:
  - name: receipts
    description: Everything about the receipts
  - name: statistics
    description: Access to statistics
paths:
  /receipts:
    get:
      tags: 
        - receipts
      summary: Returns a list of receipts.
      description: Returns all receipts without it's product.
      responses:
        '200':    # status code
          description: A JSON array of user names
          content:
            application/json:
              schema: 
                type: object
                properties:
                  receipts:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                          example: 64f1eda16af940a672e01ca1
                          description: MongoDB ObjectId as string
                        shop_name:
                          type: string
                          example: "migros"
                        date:
                          type: string
                          format: date-time
                        total:
                          type: number
                          format: float
                          
    post:
      tags: 
        - receipts
      summary: Post a new receipt.
      description: Post the new receipt and return when processed.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                receipt:
                  type: array
                  items:
                    type: object
                    properties:
                      user_id:
                        type: string
                        description: MongoDB ObjectId as string
                      shop_name:
                        type: string
                        example: "migros"
                      shop_branch:
                        type: string
                        example: "Vaud"
                      date:
                        type: string
                        format: date-time
                      total:
                        type: number
                        format: float
                      products:
                        type: array
                        items: 
                          type: object
                          properties:
                            product_name:
                              type: string
                              example: raisins vittoria
                            quantity:
                              type: number
                              format: float
                            total_price:
                              type: number
                              format: float
                            unit_price:
                              type: number
                              format: float
                            discount_amount:
                              type: number
                              format: float


      responses:
        '200':    # status code
          description: A JSON receipt with indexed name
          content:
            application/json:
              schema: 
                type: object
                properties:
                  receipt:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                          description: receipt ObjectID as string
                        user_id:
                          type: string
                          description: user ObjectID as string
                        shop_name:
                          type: string
                          example: "migros"
                        shop_branch:
                          type: string
                          example: "Vaud"
                        date:
                          type: string
                          format: date-time
                        total:
                          type: number
                          format: float
                        products:
                          type: array
                          items: 
                            type: object
                            properties:
                              product_name:
                                type: string
                                example: Fresca raisins Vittoria
                              quantity:
                                type: number
                                format: float
                              total_price:
                                type: number
                                format: float
                              unit_price:
                                type: number
                                format: float
                              discount_amount:
                                type: number
                                format: float
                              category:
                                type: string
                                example: fruits-vegetables
  /receipts/{id}:
    get:
      tags: 
        - receipts
      summary: Return a receipt
      description: Return a receipt corresponding to the id.
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ObjectId of the receipt you want to get
      responses:
        '200':    # status code
          description: A JSON receipt with indexed name
          content:
            application/json:
              schema: 
                type: object
                properties:
                  receipt:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                          description: receipt ObjectID as string
                        user_id:
                          type: string
                          description: user ObjectID as string
                        shop_name:
                          type: string
                          example: "migros"
                        shop_branch:
                          type: string
                          example: "Vaud"
                        date:
                          type: string
                          format: date-time
                        total:
                          type: number
                          format: float
                        products:
                          type: array
                          items: 
                            type: object
                            properties:
                              product_name:
                                type: string
                                example: Fresca raisins Vittoria
                              quantity:
                                type: number
                                format: float
                              total_price:
                                type: number
                                format: float
                              unit_price:
                                type: number
                                format: float
                              discount_amount:
                                type: number
                                format: float
                              category:
                                type: string
                                example: fruits-vegetables
        '404':    # status code
          description: Request with specified id not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Receipt not found
  /statistics:
    get:
      tags: 
        - statistics
      summary: Returns a list of receipts.
      description: Returns all receipts without it's product.
      parameters:
        - in: query
          name: from
          schema:
            type: string
            example: 22-01-2022
            description: The start date with the following format [day]-[month]-[fullYear]
        - in: query
          name: to
          schema:
            type: string
            example: 22-12-2022
            description: The end date with the following format [day]-[month]-[fullYear]
      responses:
        '200':    # status code
          description: A JSON object containing the statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  total: 
                    type: number
                    format: float
                  receipts: 
                    type: array
                    items:
                      type: object
                      properties:
                        date:
                          type: string
                          format: date-time
                        total: 
                          type: number
                          format: float
                  total_category:
                    type: object
                    description: Returns any categories present in tickets but not necessarily all of them
                    properties:
                      fruits-vegetables:
                        type: number
                        format: float
                      starches:
                        type: number
                        format: float
                      dairies-eggs:
                        type: number
                        format: float
                      meat-fish:
                        type: number
                        format: float
                      bread:
                        type: number
                        format: float
                      drinks:
                        type: number
                        format: float
                      breakfast:
                        type: number
                        format: float
                      other:
                        type: number
                        format: float
        '400':    # status code
          description: Query parameters are missing or malformatted
          content:
            application/json:
              schema:
                oneOf:
                  - MissingParams:
                    type: object
                    properties:
                      error:
                        type: string
                        example: Missing <from> or <to> in query
                  - MalformatedParams:
                    type: object
                    properties:
                      error:
                        type: string
                        example: query <from> or <to> are malformatted, use the following format [day]-[month]-[fullYear]
